Для начала нам нужно создать папку в котором буде лежать наш проект, назовем ее
project-jest. Откроем ее через cmd и инициализируем там npm.

> cd ./project-jest

> npm init

Отвечаем на все вопросы и проверяем что package.json появился в директории проекта.

Далее создадим файл src/index.js в корне нашего проекта

------------------------------------------------------------------------------------------

* Для создания файла через консоль, открыв директорию с проектом через cmd можем выполнить
следующие команды:

> mkdir src                 // Создаем папку src
> cd ./src                  // Переходим в нее
> echo '' > index.js        // Создаем в этой папке пустой index.js файл

------------------------------------------------------------------------------------------

Файловая структура:

- project-jest
    |
    |-- src
         |-- index.js
    |
    |-- package.json

------------------------------------------------------------------------------------------


Далее откроем наш проект через IDE или редактор кода и добавим в файл ./src/index.js
функцию:

// Эта функция переворачивает переданную строку
export default str => str.split('').reverse().join('');


Так как jest это npm пакет который используется только во время разработки то установим его
сразу в devDependencies:

Находясь в project-jest директории, выполним команду:

> npm i --save-dev jest         // Установим фремворк для тестирования в качесте зависимости
                                   для разработки.


Для корректной работы jest с модульной системой import/export необходимо добавить в
package.json строку ниже:

  "type": "module"

Jest ожидает, что тесты находятся в директории __tests__, которую обычно располагают в
корне проекта. Внутри этого каталога, можно создавать любую структуру, Jest найдёт
все тесты, которые там лежат. Именование файлов с тестами должно быть таким: <name>.test.js.
Где <name>, как правило, соответствует имени модуля, который тестируется.

------------------------------------------------------------------------------------------

* Для создания файла через консоль, открыв директорию с проектом через cmd можем выполнить
следующие команды:

> mkdir __tests__
> cd ./__tests__
> echo '' > index.test.js

------------------------------------------------------------------------------------------

Файловая структура:

- project-jest
    |
    |-- node_modules
         |- ... (a lot of files).ext
    |
    |-- src
         |-- index.js
    |
    |-- __tests__
         |-- index.test.js
    |
    |-- package.json
    |-- package-lock.json

------------------------------------------------------------------------------------------

Напишем наш первый тест. Создайте файл __tests__/index.test.js со следующим содержимым:

import reverse from '../src/index.js';

test('reverse', () => {
  expect(reverse('hello')).toEqual('olleh');
  expect(reverse('')).toEqual('');
});

------------------------------------------------------------------------------------------

После выполненных действий запустим наши тесты:

Вариант №1:
( Этот вариант может вызывать ошибку - Jest encountered an unexpected token )

> npx jest

Вариант 2:
    1. Открывает package.json
    2. Находим объект scripts
    3. В нем находим поле test
    4. В качестве значения этого поля указываем СТРОКУ "NODE_OPTIONS=--experimental-vm-modules npx jest"
    5. После чего запускаем скрипт:
        > npm run test

И видим подобный вывод:

shaitan_vladimir@MacBook-Pro-Shaitan files % npm run test

> project-jest@1.0.0 test /Users/shaitan_vladimir/PhpstormProjects/lesson-10/files
> NODE_OPTIONS=--experimental-vm-modules npx jest

(node:19003) ExperimentalWarning: VM Modules is an experimental feature. This feature could change at any time
(Use `node --trace-warnings ...` to show where the warning was created)
 PASS  __tests__/index.test.js
  ✓ reverse (2 ms)

Test Suites: 1 passed, 1 total
Tests:       1 passed, 1 total
Snapshots:   0 total
Time:        0.187 s
Ran all test suites.

-------------------

Проверям что наш тест прошел успешно и радуемся!